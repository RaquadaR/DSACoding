oo[Common function]:

Ajax common options in util.

Singular patterns 

const getMethods = (obj) => {
  let properties = new Set();
  let currentObj = obj;
  do {
    Object.getOwnPropertyNames(currentObj).forEach(item => properties.add(item));
  } while ((currentObj = Object.getPrototypeOf(currentObj)));
  return Array.from(properties.values()).filter(item => typeof obj[item] === 'function');
};


class MyClass {
  constructor() {}
  methodOne() {}
  methodTwo() {}
}

const instance = new MyClass();
const methods = getMethods(instance);
console.log(methods); // Output: ['methodOne', 'methodTwo']



// Assuming you have a class like this:
class MyClass {
  constructor() {
    // ...
  }

  originalMethod() {
    // Original method logic
  }
}

// To add a function call without modifying the original method:
MyClass.prototype.originalMethod = (function (originalMethod) {
  return function () {
    // Before the original method
    console.log('Before the original method');

    // Call the original method
    originalMethod.apply(this, arguments);

    // After the original method
    console.log('After the original method');
  };
})(MyClass.prototype.originalMethod);

// Usage:
const instance = new MyClass();
instance.originalMethod(); // This will now log before and after the original method


class MyClass {
  constructor() {
    // Initialization code
  }

  myMethod() {
    // Method code
  }
}

// Define a handler for the Proxy
const handler = {
  apply: function(target, thisArg, argumentsList) {
    console.log('Calling method:', target.name);
    return target.apply(thisArg, argumentsList);
  }
};

// Create an instance of MyClass
const instance = new MyClass();

// Create a Proxy for the instance's methods
const instanceProxy = new Proxy(instance, {
  get: function(target, prop) {
    if (typeof target[prop] === 'function') {
      // Return a bound version of the method wrapped with the handler
      return new Proxy(target[prop], handler);
    }
    return target[prop];
  }
});

// Now when you call a method through the proxy, the handler will intercept it
instanceProxy.myMethod(); // Will log "Calling method: myMethod"

// Define your class
class MyClass {
  constructor() {
    console.log('MyClass instance created');
  }

  sayHello() {
    console.log('Hello!');
  }
}

// Create a handler for the proxy
const handler = {
  construct(target, args) {
    console.log('Intercepted construction');
    return new target(...args);
  }
};

// Create a proxy for the class
const MyClassProxy = new Proxy(MyClass, handler);

// Now you can instantiate MyClass through the proxy
const instance = new MyClassProxy();



class MyClass {
  constructor() {
    // Create a proxy for the class instance
    return new Proxy(this, {
      get(target, prop, receiver) {
        // Intercept function calls
        const origMethod = target[prop];
        if (typeof origMethod === 'function') {
          return function (...args) {
            console.log(`Calling method ${prop} with arguments:`, args);
            return origMethod.apply(target, args);
          };
        }
        return origMethod;
      }
    });
  }

  myFunction() {
    console.log('Original function call');
  }
}

// Create an instance of MyClass using the proxy
const myInstance = new MyClass();

// Call the function via the proxy
myInstance.myFunction(); // Logs the method call and executes the original function..

